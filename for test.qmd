---
title: "fortest"
format: html
editor: visual
---

```{r}
# Load libraries
library(here)
library(sf)
library(stars)
library(terra)
library(units)          # for droping units of the data (Bathymetry)
library(tmap)
library(tmaptools)      # for reading OpenStreetMap data
library(knitr)          # for generating table
library(dplyr)
library(tidyverse)
library(testthat)
library(viridisLite)
```

```{r}
#| code-fold: true
# Load data

## West Coast EEZ
wc_region <- sf::st_read(here::here("data","wc_regions_clean.shp"), quiet = TRUE)

## Bathymetry
Bathymetry <- stars::read_stars(here::here("data", "depth.tif"), quiet = TRUE)
                                
## Sea Surface Temperature

### Read the path of all temperature files
files <- list.files(
  here("data"), pattern = "average*", 
  full.names = TRUE)

SST <- data.frame(file_name = files)

### Combine all temperature file into a raster stack and calculate average
SST_stack <- SST$file_name %>%
  lapply(read_stars) %>%      # Generate a list with stars files
  do.call(c, .)               # Generate the raster stack

### Calculate average temperature and save as a raster 
SST_ave <- st_apply(SST_stack, MARGIN = c("x", "y"), 
                    FUN = mean, na.rm = TRUE) %>%
           write_stars("SST_mean.tif")

### Convert average SST from Kelvin to Celsius
SST_aveC <- SST_ave - 273.15
```

```{r}
# Check if coordinate reference systems (CRS) of all data match
if ((st_crs(wc_region) == st_crs(Bathymetry)) &&
    (st_crs(wc_region) == st_crs(SST_aveC))) {
  print("all match!")
} else {
  print("not match")
}
```

```{r}
# Crop depth raster to match the extent of the SST raster
SST_extent <- st_bbox(SST_aveC)
Bathymetry_cropped <- st_crop(Bathymetry, SST_extent)

# Resample the depth data to match the resolution of the SST data 
# using the nearest neighbor approach
Bathymetry_resampled <- st_warp(Bathymetry_cropped, SST_aveC, method = "near")
```

```{r}
# Check that the depth and SST match in resolution, extent, and coordinate reference system

## Try to stack
stack_raster <- tryCatch({
  c(SST_aveC, Bathymetry_resampled)  # Try stacking the rasters
}, error = function(e) {
  NULL  # If stacking fails, return NULL
})

## Check if successfully stack
if (!is.null(stack_raster)) {
  print("all match!")
} else {
  print("not match")
}
```

```{r}
## for test
  # Drop the units (m) of Bathymetry data
  Depth <- drop_units(Bathymetry_resampled)
  
  # Set suitable values to 1 and unsuitable values to 0
  # This process will generates a "matrix"/"array" objective
  SST_suit <- ifelse(SST_aveC[[1]] >= 3 & SST_aveC[[1]] <= 19, 1, 0)
  Depth_suit <- ifelse(Depth[[1]] >= -360 & Depth[[1]] <= 0, 1, 0) 
  
  # Transform the "matrix"/"array" objective to "stars" format
  SST_stars <- st_as_stars(SST_suit, dimensions = st_dimensions(SST_aveC))
  Depth_stars <- st_as_stars(Depth_suit, 
                             dimensions = st_dimensions(Depth))
  ## Try to stack
stack_raster <- tryCatch({
  c(SST_stars, Depth_stars)  # Try stacking the rasters
}, error = function(e) {
  NULL  # If stacking fails, return NULL
})

## Check if successfully stack 
if (!is.null(stack_raster)) {
  print("all match!")
} else {
  print("not match")
}
  
# Find suitable locations
oyster_suit <- SST_stars * Depth_stars

# Set unsuitable area as NA
oyster_suit[oyster_suit == 0] <- NA


# Transform data format from stars/sf to terra
# Keep same projection (EPSG:5070, Projection method: Albers Equal Area, unit:m)
oyster_suit_terra <- terra::rast(oyster_suit) %>%
                     terra::project("EPSG:5070")
wc_region_terra <- terra::vect(wc_region)%>%
                     terra::project("EPSG:5070")


# Find suitable area within the extent of Exclusive Economic Zones
oyster_suit_EEZ <- terra::mask(oyster_suit_terra, wc_region_terra)


# Rasterize Exclusive Economic Zones data
EEZ_rasterized <- terra::rasterize(wc_region_terra,
                                   oyster_suit_terra,
                                   field = "rgn_id") 
#EEZ_mask <- mask(EEZ_rasterized, oyster_suit_EEZ)

# Find suitable area within EEZ
## Generate a raster with area information
oyster_cell_size <- terra::cellSize(oyster_suit_EEZ)
## Mask EEZ on the area raster
cell_area_masked <- mask(oyster_cell_size, oyster_suit_EEZ)

## Find suitable area within each EEZ
suitable_area <- terra::zonal(cell_area_masked, EEZ_rasterized, 
                              fun = "sum", 
                              na.rm = TRUE) 

## Transform the unit of the data and add the name of EEZ
suitable_area$suitable_area_km2 <- suitable_area$area / 1e6
suitable_area$EEZ_name <- c("Oregon", "Northern California",
                            "Central California", "Southern California",
                            "Washington")

## Generate a summary table
suitable_area <- suitable_area[, c("EEZ_name", "suitable_area_km2")]
suitable_area_tab <- kable(suitable_area, 
                           caption = "Table 1 Suitable Area of Oyster in Each Exclusive Economic Zones (km²)",
                           col.names = c("Name", "Area (km²)")) 

# Join total suitable area information to original EEZ (sf file)
EEZ_suitable_area <- left_join(wc_region, suitable_area,
                              by = c("rgn" = "EEZ_name"))

# Map the suitable area for oyster
## Download base map from OSM of the bounding box
background_data <- tmaptools::read_osm(sf::st_bbox(SST_extent))

## Keep raster data the same CRS to OSM
oyster_suit_sameCRS <- st_transform(oyster_suit, 
                                       crs = st_crs(background_data))


oyster_map <- tm_shape(background_data) + 
                tm_rgb() +
                tm_shape(oyster_suit_sameCRS) +
                tm_raster(palette = "red",
                          title = "",
                          labels = "Suitable locations" ) +
                tm_credits("© OpenStreetMap contributors",
                           position=c("left", "bottom")) +
                tm_layout(legend.text.size = 0.6,
                          legend.text.fontface = "bold",
                          legend.outside = TRUE,
                          panel.labels = "(A)",
                          panel.label.bg.color = "white") +
                tm_scale_bar(position = c(0.05, 0.1),
                             breaks = c(0, 100, 200, 300, 400)) +
                tm_compass(position = c(0.05, 0.8),
                           size = 1.3)

## Map the EEZ with total suitable area
### Get unique area values for each EEZ and sort them
unique_values <- sort(unique(EEZ_suitable_area$suitable_area_km2)) 

### Generate breaks
breaks <- c(unique_values, max(unique_values) + 1)

### Generate palette
palette <- viridisLite::viridis(length(unique_values))

EEZ_suitable_map <- tm_shape(background_data) + 
                       tm_rgb() +
                       tm_shape(EEZ_suitable_area) +
                       tm_polygons(
                         col = "suitable_area_km2",
                         breaks = breaks,
                         labels = as.character(ceiling(unique_values)),
                         palette = palette,
                         title = "Total suitable area(km²)") +
                       tm_shape(oyster_suit_sameCRS) +
                       tm_raster(palette = "red",
                          title = "",
                          labels = "Suitable locations" ) +
                       tm_shape(EEZ_suitable_area) +
                       tm_text("rgn", size = 0.5) +
                       tm_credits("© OpenStreetMap contributors",
                                   position=c("left", "bottom")) +
                       tm_layout(legend.text.size = 0.7,
                                 legend.title.size = 1,
                                 legend.title.fontface = "bold",
                                 legend.outside = TRUE) +
                       tm_scale_bar(position = c(0.05, 0.1),
                                    breaks = c(0, 100, 200, 300, 400)) +
                       tm_compass(position = c(0.05, 0.8),
                                  size = 1.3)
map_table <- list(map1 = oyster_map, map2 = EEZ_suitable_map,
                  area_table = suitable_area_tab)

tmap_arrange(map_table$map1, map_table$map2, ncol = 2)
```
